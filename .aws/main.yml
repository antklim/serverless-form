AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template creates DynamoDB table to store form data

Parameters:
  ProjectName:
    Description: Project name used to identify created AWS resources
    Type: String
  ApiResource:
    Description: An API resource name to handle form data requests
    Type: String
  TableName:
    Type: String
    Description: Form data table name

Resources:
  FormDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref TableName
      Tags:
        - Key: project
          Value: !Ref ProjectName
        - Key: stack
          Value: !Ref AWS::StackName

  APIGWRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      Tags:
        - Key: project
          Value: !Ref ProjectName
        - Key: stack
          Value: !Ref AWS::StackName

  APIGWPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows Api Gateway to access Form Data table
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt FormDataTable.Arn
      Roles:
        - !Ref APIGWRole

  APIGW:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: !Sub ${ProjectName} APIs
      DisableExecuteApiEndpoint: false # TODO: disable when custom domain name provided
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref ProjectName
      Tags:
        - Key: project
          Value: !Ref ProjectName
        - Key: stack
          Value: !Ref AWS::StackName

  FormDataInputModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: A form data input model
      Name: FormDataRequest
      RestApiId: !Ref APIGW
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: FormDataInputModel
        type: object
        properties:
          email:
            type: string
            format: email
          fullName:
            type: string
            maxLength: 255
          comment:
            type: string
            maxLength: 255
        required:
          - email
          - fullName

  FormDataOutputModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: A response on form data processing
      Name: FormDataResponse
      RestApiId: !Ref APIGW
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: FormDataOutputModel
        type: object
        properties:
          message:
            type: string
          statusCode:
            type: number

  FormDataRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref APIGW
      ValidateRequestBody: true
      ValidateRequestParameters: true

  FormDataResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGW.RootResourceId
      PathPart: !Ref ApiResource
      RestApiId: !Ref APIGW

  FormDataPOSTApi:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref FormDataResource
      RestApiId: !Ref APIGW
      RequestModels:
        application/json: !Ref FormDataInputModel
      RequestParameters:
        method.request.header.Content-Type: true
      RequestValidatorId: !Ref FormDataRequestValidator
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGWRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.header.Content-Type: method.request.header.Content-Type
        RequestTemplates:
          application/json: |
            #set($inputRoot = $input.path('$'))
            {
                "TableName": "intention",
                "Item": {
                    "email": {
                        "S": "$inputRoot.email"
                    },
                    "fullName": {
                        "S": "$inputRoot.fullName"
                    },
                    "comment": {
                        "S": "$inputRoot.comment"
                    }
                },
                "ConditionExpression": "email <> :e",
                "ExpressionAttributeValues": {
                    ":e": {"S": "$inputRoot.email"}
                }
            }
          application/x-www-form-urlencoded: |
            #set( $email = '' )
            #set( $fullName = '' )
            #set( $comment = '' )
            #foreach( $token in $input.path('$').split('&') )
                #set( $keyVal = $token.split('=') )
                #set( $keyValSize = $keyVal.size() )
                #if( $keyValSize >= 1 )
                    #set( $key = $util.urlDecode($keyVal[0]) )
                    #if( $keyValSize >= 2 )
                        #set( $val = $util.urlDecode($keyVal[1]) )
                    #else
                        #set( $val = '' )
                    #end

                    #if( $key == 'email' )
                      #set( $email = $val )
                    #elseif( $key == 'fullName' )
                      #set( $fullName = $val )
                    #elseif( $key == 'comment' )
                      #set( $comment = $val )
                    #end
                #end
            #end
            {
                "TableName": "intention",
                "Item": {
                    "email": {
                        "S": "$email"
                    },
                    "fullName": {
                        "S": "$fullName"
                    },
                    "comment": {
                        "S": "$comment"
                    }
                },
                "ConditionExpression": "email <> :e",
                "ExpressionAttributeValues": {
                    ":e": {"S": "$email"}
                }
            }
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 2\d{2}
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: |
                {"message": "Thank you! We will keep you posted!", "statusCode": 200}
          - StatusCode: 500
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: |
                {"message": "Oops! Something went wrong :(", "statusCode": 500}
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: !Ref FormDataOutputModel
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: !Ref FormDataOutputModel

  FormDataCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref FormDataResource
      RestApiId: !Ref APIGW
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {"statusCode": 200}
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  FormDataApiTestDeployment:
    DependsOn: FormDataPOSTApi
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGW
      Description: Test stage deployment

  FormDataApiTestStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: test
      Description: test stage
      RestApiId: !Ref APIGW
      DeploymentId: !Ref FormDataApiTestDeployment
      MethodSettings:
        - ResourcePath: !Sub /${ApiResource}
          HttpMethod: POST
          LoggingLevel: ERROR
          DataTraceEnabled: true
          ThrottlingBurstLimit: 5
          ThrottlingRateLimit: 10
