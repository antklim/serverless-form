AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template creates DynamoDB table to store form data

Parameters:
  ProjectName:
    Description: Project name used to identify created AWS resources
    Type: String
  TableName:
    Type: String
    Description: Form data table name

Resources:
  FormDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Ref TableName
      Tags:
        - Key: project
          Value: !Ref ProjectName
        - Key: stack
          Value: !Ref AWS::StackName

  APIGWRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      Tags:
        - Key: project
          Value: !Ref ProjectName
        - Key: stack
          Value: !Ref AWS::StackName

  APIGWPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows Api Gateway to access Form Data table
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt FormDataTable.Arn
      Roles:
        - !Ref APIGWRole

  APIGW:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: !Sub ${ProjectName} APIs
      # DisableExecuteApiEndpoint: true # TODO: disable when custom domain name provided
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref ProjectName
      Tags:
        - Key: project
          Value: !Ref ProjectName
        - Key: stack
          Value: !Ref AWS::StackName

  FormDataInputModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: A form data input model
      Name: FormDataRequest
      RestApiId: !Ref APIGW
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: FormDataInputModel
        type: object
        properties:
          email:
            type: string
          fullName:
            type: string
          comment:
            type: string
            maxLength: 255
        required:
          - email
          - fullName

  FormDataOutputModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Description: A response on form data processing
      Name: FormDataResponse
      RestApiId: !Ref APIGW
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: FormDataOutputModel
        type: object
        properties:
          message:
            type: string

  FormDataRequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref APIGW
      ValidateRequestBody: true
      ValidateRequestParameters: true

  FormDataPOSTApi:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !GetAtt APIGW.RootResourceId
      RestApiId: !Ref APIGW
      RequestModels:
        application/json: !Ref FormDataInputModel
      RequestParameters:
        method.request.header.Content-Type: true
      RequestValidatorId: !Ref FormDataRequestValidator
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGWRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: |
            #set($inputRoot = $input.path('$'))
            {
                "TableName": "intention",
                "Item": {
                    "email": {
                        "S": "$inputRoot.email"
                    },
                    "fullName": {
                        "S": "$inputRoot.fullName"
                    },
                    "comment": {
                        "S": "$inputRoot.comment"
                    }
                },
                "ConditionExpression": "email <> :e",
                "ExpressionAttributeValues": {
                    ":e": {"S": "$inputRoot.email"}
                }
            }
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 2\d{2}
            ResponseTemplates:
              application/json: |
                {"message": "Thank you! We will keep you posted!"}
          - StatusCode: 500
            ResponseTemplates:
              application/json: |
                {"message": "Oops! Something went wrong :("}
      MethodResponses:
        - ResponseModels:
            application/json: !Ref FormDataOutputModel
          StatusCode: 200
        - ResponseModels:
            application/json: !Ref FormDataOutputModel
          StatusCode: 500
